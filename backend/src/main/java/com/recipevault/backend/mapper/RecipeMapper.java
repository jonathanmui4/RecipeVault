package com.recipevault.backend.mapper;

import com.recipevault.backend.dto.RecipeCreateDTO;
import com.recipevault.backend.dto.RecipeDetailDTO;
import com.recipevault.backend.dto.RecipeSummaryDTO;
import com.recipevault.backend.dto.RecipeUpdateDTO;
import com.recipevault.backend.entities.IngredientEntity;
import com.recipevault.backend.entities.RecipeEntity;
import org.mapstruct.AfterMapping;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

import java.util.List;

// Uses IngredientMapper when mapping Ingredient objects within a Recipe
@Mapper(componentModel = "spring", uses = {IngredientMapper.class})
public interface RecipeMapper {

    // Calculates ingredientCount on the fly for lightweight DTO with summary info
    @Mapping(target = "ingredientCount", expression = "java(recipe.getIngredients().size())")
    RecipeSummaryDTO toSummaryDTO(RecipeEntity recipe);

    List<RecipeSummaryDTO> toSummaryDTOList(List<RecipeEntity> recipes);

    // DTO with all recipe details, Mapstruct automatically uses IngredientMapper to convert Ingredients list
    RecipeDetailDTO toDetailDTO(RecipeEntity recipe);

    // Ingredients filed handled separately and id is generated by database
    @Mapping(target = "ingredients", ignore = true)
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdDate", expression = "java(java.time.LocalDateTime.now())")
    RecipeEntity toEntity(RecipeCreateDTO dto);

    // Maps data from RecipeUpdateDTO to existing recipe entity, only updating fields present in DTO
    @Mapping(target = "ingredients", ignore = true)
    @Mapping(target = "id", ignore = true)
    void updateRecipeFromDTO(RecipeUpdateDTO dto, @MappingTarget RecipeEntity recipe);

    // Executes after automatic mapping
    // Handles complex relationships
    // Extracts ingredient names from DTO and create new ingredient entities
    @AfterMapping
    default void mapIngredients(RecipeCreateDTO dto, @MappingTarget RecipeEntity recipe) {
        if (dto.getIngredientNames() != null) {
            dto.getIngredientNames().forEach(name -> {
                IngredientEntity ingredient = new IngredientEntity();
                ingredient.setIngredientName(name);
                recipe.addIngredient(ingredient);
            });
        }
    }

    @AfterMapping
    default void mapIngredients(RecipeUpdateDTO dto, @MappingTarget RecipeEntity recipe) {
        if (dto.getIngredientNames() != null) {
            dto.getIngredientNames().forEach(name -> {
                IngredientEntity ingredient = new IngredientEntity();
                ingredient.setIngredientName(name);
                recipe.addIngredient(ingredient);
            });
        }
    }

}

