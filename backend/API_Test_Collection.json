{
  "info": {
    "name": "RecipeVault Authentication API",
    "description": "Complete test suite for RecipeVault authentication and recipe management",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:9000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testRecipeId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "1. Register New User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user profile\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('username');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.not.have.property('password');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set(\"testUserId\", response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser{{$randomInt}}\",\n  \"email\": \"test{{$randomInt}}@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "2. Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.expect(response).to.have.property('type', 'Bearer');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Auto-save token for authenticated requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set(\"authToken\", response.token);",
                  "    console.log(\"Token saved:\", response.token.substring(0, 20) + \"...\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"usernameOrEmail\": \"testuser123\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "3. Check Username Availability",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is boolean\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(typeof response).to.equal('boolean');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/check-username?username=testuser123",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "check-username"],
              "query": [
                {
                  "key": "username",
                  "value": "testuser123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "4. Check Email Availability",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is boolean\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(typeof response).to.equal('boolean');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/check-email?email=test123@example.com",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "check-email"],
              "query": [
                {
                  "key": "email",
                  "value": "test123@example.com"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "❌ Login with Wrong Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthorized status\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message returned\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"usernameOrEmail\": \"testuser123\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "🌐 Public Recipe Endpoints",
      "item": [
        {
          "name": "1. Get All Recipes (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "// Save first recipe ID for testing",
                  "if (pm.response.code === 200) {",
                  "    const recipes = pm.response.json();",
                  "    if (recipes.length > 0) {",
                  "        pm.environment.set(\"testRecipeId\", recipes[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/recipes",
              "host": ["{{baseUrl}}"],
              "path": ["recipes"]
            }
          },
          "response": []
        },
        {
          "name": "2. Get Recipe Details (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Recipe details returned\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "    pm.expect(response).to.have.property('ingredients');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/recipes/{{testRecipeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["recipes", "{{testRecipeId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "🔒 Protected Recipe Endpoints",
      "item": [
        {
          "name": "1. Create Recipe (Authenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Recipe created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Recipe has user info\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('creatorName');",
                  "    pm.expect(response.creatorName).to.equal('Test User');",
                  "});",
                  "",
                  "// Save created recipe ID",
                  "if (pm.response.code === 201) {",
                  "    const recipe = pm.response.json();",
                  "    pm.environment.set(\"myRecipeId\", recipe.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"My Authenticated Recipe\",\n  \"difficulty\": \"EASY\",\n  \"instructions\": \"This recipe was created by an authenticated user!\",\n  \"imageUrl\": \"https://picsum.photos/400/250?random=9999\",\n  \"ingredientNames\": [\"authenticated ingredient\", \"secure spice\", \"token salt\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/recipes",
              "host": ["{{baseUrl}}"],
              "path": ["recipes"]
            }
          },
          "response": []
        },
        {
          "name": "2. Get My Recipes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All recipes belong to user\", function () {",
                  "    const recipes = pm.response.json();",
                  "    recipes.forEach(recipe => {",
                  "        pm.expect(recipe.creatorName).to.equal('Test User');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/recipes/my-recipes",
              "host": ["{{baseUrl}}"],
              "path": ["recipes", "my-recipes"]
            }
          },
          "response": []
        },
        {
          "name": "3. Update My Recipe",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Recipe updated successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Title was updated\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.title).to.equal('Updated by Owner');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated by Owner\",\n  \"difficulty\": \"MEDIUM\",\n  \"instructions\": \"This recipe was updated by its owner!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/recipes/{{myRecipeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["recipes", "{{myRecipeId}}"]
            }
          },
          "response": []
        },
        {
          "name": "❌ Try Update Someone Else's Recipe",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Access forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Error message about ownership\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('your own recipes');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Trying to hack this recipe!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/recipes/{{testRecipeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["recipes", "{{testRecipeId}}"]
            }
          },
          "response": []
        },
        {
          "name": "4. Delete My Recipe",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Recipe deleted successfully\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/recipes/{{myRecipeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["recipes", "{{myRecipeId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "❌ Unauthorized Access Tests",
      "item": [
        {
          "name": "Create Recipe Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthorized status\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Authentication required message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Authentication required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Unauthorized Recipe\",\n  \"difficulty\": \"EASY\",\n  \"instructions\": \"This should fail\",\n  \"ingredientNames\": [\"failure\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/recipes",
              "host": ["{{baseUrl}}"],
              "path": ["recipes"]
            }
          },
          "response": []
        },
        {
          "name": "Get My Recipes Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthorized status\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/recipes/my-recipes",
              "host": ["{{baseUrl}}"],
              "path": ["recipes", "my-recipes"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}